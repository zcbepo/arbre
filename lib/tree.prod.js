"use strict";const n=console.warn;function r(n){return"number"==typeof n||"string"==typeof n}function t(n,r){return n?[n,r].join("-"):`${r}`}function e(n,r,i=""){r.forEach(((r,o)=>{var s;const c=t(i,o);n(r,c),(null===(s=r.children)||void 0===s?void 0:s.length)&&e(n,r.children,c)}))}function i(n,r,e=""){return r.map(((r,o)=>{const s=t(e,o),c=n(Object.assign({},r),s);return r.children&&(c.children=i(n,r.children,s)),c}))}function o(n,r,e=""){var i;const s=[];for(let c=0;c<r.length;c++){const h=Object.assign({},r[c]),d=t(e,c),l=n(h,d);h.children&&(h.children=o(n,h.children,d)),(l||(null===(i=h.children)||void 0===i?void 0:i.length))&&s.push(h)}return s}class s{constructor(n){this._raw=n,this._markPosition()}get data(){return this._raw}_markPosition(){this.forEach(((n,r)=>{n.pos=r}))}static from(n){const r=new Map,t=[];return n.forEach((n=>{r.set(n.id,Object.assign(Object.assign({},n),{children:[]}))})),n.forEach((n=>{if(-1==n.pid)t.push(r.get(n.id));else{const t=r.get(n.pid);t.children||(t.children=[]),t.children.push(r.get(n.id))}})),new s(t)}at(n){const r=n.split("-").map((n=>parseInt(n)));try{let n=this._raw[r.shift()];if(r.forEach((r=>{var t;n=null===(t=n.children)||void 0===t?void 0:t[r]})),!n)throw Error();return n}catch(r){return console.warn(`cannot find tree node on position: ${n} in this tree`),null}}push(t){if(!function(t){return r(t.id)?!!r(t.pid)||(n("node pid should be string or number, got "+typeof t.pid),!1):(n("node id should be string or number, got "+typeof t.id),!1)}(t))return;let e;if(-1===t.pid)e=this._raw;else{const n=this.find((n=>n.id===t.pid));if(!n)return void console.warn("parent not found in the tree, please check node.pid");e=n.children}e.push(t)}flat(){const n=[];return this.forEach((r=>{n.push(r)})),n}forEach(n){e(n,this._raw)}map(n){return i(n,this._raw)}filter(n){return o(n,this._raw)}find(n){return function(n,r,e=""){for(let i=0;i<r.length;i++){const s=Object.assign({},r[i]),c=t(e,i);if(n(s,c))return s;s.children&&(s.children=o(n,s.children,c))}return null}(n,this._raw)}}module.exports=s;
